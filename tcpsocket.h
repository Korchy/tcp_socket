//---------------------------------------------------------------------------
#ifndef TCPSocket_H
#define TCPSocket_H
//---------------------------------------------------------------------------
#include <iostream>		// Для использования основного потока вывода на экран
#include <netinet/in.h>		// Описание основной структуры сокета
#include <sys/socket.h>		// Определение ф-ции bind()
#include <unistd.h>		// Определение ф-ции close(),fork()
#include <string>		// Для использования типа string
#include <signal.h>		// Для обработки сигналов
#include <sys/stat.h>		// Для использования ф-ции umask()
#include <syslog.h>		// Для использования журнала логов (/var/log/messages)
#include <arpa/inet.h>		// Для использования ф-ции inet_ntoa
#include <netdb.h>		// Для использования getprotobyname
//---------------------------------------------------------------------------
// Класс TCPSocket - обеспечивает получение и отправку данных через TCP-сокет
//---------------------------------------------------------------------------
class TCPSocket
{
protected:
        // Доступно только потомкам
        // Переменные
	
	// Функции
	void Message(char Msg[]);	// Вывод сообщения в лог
	void Message(std::string* Msg);	// Вывод сообщения в лог
private:
        // Доступно только этому классу
        // Переменные
	int ListenId;			// ID прослушивающего сокета
	int NewSocketId;		// ID нового открываемого сокета
	
	unsigned short PortNumber;	// № порта через который будет вестись обмен данными с клиентами
	unsigned int MaxClients;	// Максимальное кол-во клиентов, которое можно поставить на прослушивание сокетом
	
	sockaddr_in* SocketStruc;	// Основная структура сокета сервера
	
	bool Listening;			// true - сокет находится в режиме ожидания соединений от клиентов, false - нет
	enum {B_DATA,T_DATA} DataType;	// Вид данных с которыми работает сокет (двоичные/текст)
	
	unsigned int ListenProcess;	// Номер процесса на который вешается прослушивание сокета на подключения клиентов
	
	// Функции
	void zeromemory(void* ptr, int BytesCount);	// Служебная функция очистки памяти
	
public:
        // Доступно всем
        TCPSocket(void);		// Констуктор класса без параметров
        virtual ~TCPSocket();		// Деструктор класса
	
        // Переменные
	unsigned int BlockSizeIn;	// Размер блока принимаемых данных (для текста - кол-во символов, для двоичных жанных - кол-во байт)
	unsigned int BlockSizeOut;	// Размер блока отправляемых данных (для текста - кол-во символов, для двоичных жанных - кол-во байт)
	
	int ReadChannel;		// Дискриптор канала через который можно читать поступившие на сокет данные
	int WriteChannel;		// Дискриптор канала через который можно данные для отправки на сокет данные
	
        // Функции
	bool Start();		// Запуск сокета в работу
	bool SetPort(unsigned short PortNum);	// Установить номер порта, через который будет работать сокет
	void SetMaxClients(unsigned int MaxClt);	// Установить максимальное кол-во клиентов, устанавливаемых на прослушивание
	void SetDataType(int DType);		// Установить тип данных с которыми будет работать сокет (двоичные/текст)
		
	bool WorkWithBinaryData(int ConnectionId, int OutputChannel, int InputChannel);	// Получить двоичные данные от клиента
	bool WorkWithTextData(int ConnectionId, int OutputChannel, int InputChannel);	// Получить строку текста от клиента
	
};
//---------------------------------------------------------------------------
#endif
